-module(http_parse_tests).

-include_lib("eunit/include/eunit.hrl").

-include("http_parse.hrl").

check_para_test() ->
    %%浮点型 float
    ?assertEqual({ok, #{body => [{agent_id, 100.0}]}},
                 http_parse:check_para(#{body => [{agent_id, "100.0"}]},
                                       #{body =>
                                             [tuple, {para, [{agent_id, [float, required]}]}]})),
    ?assertEqual({ok, #{body => [{agent_id, 100.0}]}},
                 http_parse:check_para(#{body => [{agent_id, "100"}]},
                                       #{body =>
                                             [tuple, {para, [{agent_id, [float, required]}]}]})),
    ?assertEqual({error,
                  ?COMBINE_ERR(?HEAD_ERR(agent_id, body),
                               ?SIZE_ERR(3.50000000000000001566e+38,
                                         -3.39999999999999996124e+38,
                                         3.39999999999999996124e+38,
                                         float,
                                         required))},
                 http_parse:check_para(#{body => [{agent_id, 3.5 * math:pow(10, 38)}]},
                                       #{body => [tuple, [{agent_id, [float, required]}]]})),
    ?assertEqual({error,
                  ?COMBINE_ERR(?HEAD_ERR(agent_id, body),
                               ?SIZE_ERR(-3.50000000000000001566e+38,
                                         -3.39999999999999996124e+38,
                                         3.39999999999999996124e+38,
                                         float,
                                         required))},
                 http_parse:check_para(#{body => [{agent_id, -3.5 * math:pow(10, 38)}]},
                                       #{body =>
                                             [tuple, {para, [{agent_id, [float, required]}]}]})),
    ?assertEqual({ok, #{body => [{agent_id, 100.0}]}},
                 http_parse:check_para(#{body => [{agent_id, "100"}]},
                                       #{body =>
                                             [tuple, {para, [{agent_id, [float, required]}]}]})),
    ?assertEqual({ok, #{body => [{agent_id, -100.0}]}},
                 http_parse:check_para(#{body => [{agent_id, "-100"}]},
                                       #{body =>
                                             [tuple, {para, [{agent_id, [float, required]}]}]})),
    ?assertEqual({ok, #{body => [{agent_id, -100.0}]}},
                 http_parse:check_para(#{body => [{agent_id, "-100"}]},
                                       #{body =>
                                             [tuple, {para, [{agent_id, [float, optional]}]}]})),
    ?assertEqual({error,
                  ?COMBINE_ERR(?HEAD_ERR(agent_id, body), ?TYPE_ERR(undefined, float, optional))},
                 http_parse:check_para(#{body => [{agent_id, undefined}]},
                                       #{body =>
                                             [tuple, {para, [{agent_id, [float, optional]}]}]})),

    %%pos_integer
    ?assertEqual({ok, #{body => [#{agent_id => 100}]}},
                 http_parse:check_para(#{body => [#{agent_id => "100"}]},
                                       #{body =>
                                             [list,
                                              {para, [{agent_id, [pos_integer, optional]}]}]})),
    ?assertEqual({ok, #{body => [#{agent_id => 100}, #{agent_id => 100}]}},
                 http_parse:check_para(#{body => [#{agent_id => "100"}, #{agent_id => 100}]},
                                       #{body =>
                                             [list,
                                              {para, [{agent_id, [pos_integer, optional]}]}]})),
    ?assertEqual({error,
                  ?COMBINE_ERR(?HEAD_ERR(agent_id, body),
                               ?TYPE_ERR(undefined, pos_integer, optional))},
                 http_parse:check_para(#{body => [#{agent_id => undefined}]},
                                       #{body =>
                                             [list,
                                              {para, [{agent_id, [pos_integer, optional]}]}]})),
    ?assertEqual({error,
                  ?COMBINE_ERR(?HEAD_ERR(agent_id, body),
                               ?TYPE_ERR(undefined, pos_integer, required))},
                 http_parse:check_para(#{body => [#{agent_id => undefined}]},
                                       #{body =>
                                             [tuple,
                                              {para, [{agent_id, [pos_integer, required]}]}]})),
    ?assertEqual({error,
                  ?COMBINE_ERR(?HEAD_ERR(agent_id, body),
                               ?SIZE_ERR(-100, 1, 2147483647, pos_integer, required))},
                 http_parse:check_para(#{body => [#{agent_id => "-100"}]},
                                       #{body =>
                                             [list,
                                              {para, [{agent_id, [pos_integer, required]}]}]})),
    ?assertEqual({error,
                  ?COMBINE_ERR(?HEAD_ERR(agent_id, body),
                               ?SIZE_ERR(2147483648, 1, 2147483647, pos_integer, required))},
                 http_parse:check_para(#{body => [#{agent_id => "2147483648"}]},
                                       #{body =>
                                             [list,
                                              {para, [{agent_id, [pos_integer, required]}]}]})),
    ?assertEqual({error,
                  ?COMBINE_ERR(?HEAD_ERR(agent_id, body),
                               ?SIZE_ERR(0, 1, 2147483647, pos_integer, required))},
                 http_parse:check_para(#{body => [#{agent_id => "0"}]},
                                       #{body =>
                                             [list,
                                              {para, [{agent_id, [pos_integer, required]}]}]})),
    ?assertEqual({error,
                  ?COMBINE_ERR(?HEAD_ERR(agent_id, body),
                               ?TYPE_ERR("100.0", pos_integer, required))},
                 http_parse:check_para(#{body => [#{agent_id => "100.0"}]},
                                       #{body =>
                                             [list,
                                              {para, [{agent_id, [pos_integer, required]}]}]})),

    %%integer
    ?assertEqual({ok, #{body => [#{agent_id => 100}]}},
                 http_parse:check_para(#{body => [#{agent_id => "100"}]},
                                       #{body =>
                                             [list, {para, [{agent_id, [integer, optional]}]}]})),
    ?assertEqual({error,
                  ?COMBINE_ERR(?HEAD_ERR(agent_id, body), ?TYPE_ERR(undefined, integer, required))},
                 %%        <<"Error agent_id, The body param agent_id is undefined must be integer, type is required">>} ,
                 http_parse:check_para(#{body => [#{agent_id => undefined}]},
                                       #{body =>
                                             [tuple, {para, [{agent_id, [integer, required]}]}]})),
    ?assertEqual({ok, #{body => [#{agent_id => -100}]}},
                 http_parse:check_para(#{body => [#{agent_id => "-100"}]},
                                       #{body =>
                                             [list, {para, [{agent_id, [integer, required]}]}]})),
    ?assertEqual({error,
                  ?COMBINE_ERR(?HEAD_ERR(agent_id, body),
                               ?SIZE_ERR(12147483648,
                                         -2.14748364800000000000e+09,
                                         2147483647,
                                         integer,
                                         required))},
                 http_parse:check_para(#{body => [#{agent_id => "12147483648"}]},
                                       #{body =>
                                             [list, {para, [{agent_id, [integer, required]}]}]})),
    ?assertEqual({ok, #{body => [#{agent_id => 0}]}},
                 http_parse:check_para(#{body => [#{agent_id => "0"}]},
                                       #{body =>
                                             [list, {para, [{agent_id, [integer, required]}]}]})),
    ?assertEqual({error,
                  ?COMBINE_ERR(?HEAD_ERR(agent_id, body), ?TYPE_ERR("100.0", integer, required))},
                 http_parse:check_para(#{body => [#{agent_id => "100.0"}]},
                                       #{body =>
                                             [list, {para, [{agent_id, [integer, required]}]}]})),

    %%neg_integer
    ?assertEqual({ok, #{body => [#{agent_id => -100}]}},
                 http_parse:check_para(#{body => [#{agent_id => "-100"}]},
                                       #{body =>
                                             [list,
                                              {para, [{agent_id, [neg_integer, optional]}]}]})),
    ?assertEqual({error,
                  ?COMBINE_ERR(?HEAD_ERR(agent_id, body),
                               ?TYPE_ERR(undefined, neg_integer, optional))},
                 http_parse:check_para(#{body => [#{agent_id => undefined}]},
                                       #{body =>
                                             [list,
                                              {para, [{agent_id, [neg_integer, optional]}]}]})),
    ?assertEqual({error,
                  ?COMBINE_ERR(?HEAD_ERR(agent_id, body),
                               ?TYPE_ERR(undefined, neg_integer, required))},
                 http_parse:check_para(#{body => [#{agent_id => undefined}]},
                                       #{body =>
                                             [tuple,
                                              {para, [{agent_id, [neg_integer, required]}]}]})),
    ?assertEqual({error,
                  ?COMBINE_ERR(?HEAD_ERR(agent_id, body),
                               ?SIZE_ERR(100,
                                         -2.14748364800000000000e+09,
                                         -1,
                                         neg_integer,
                                         optional))},
                 http_parse:check_para(#{body => [#{agent_id => 100}]},
                                       #{body =>
                                             [list,
                                              {para, [{agent_id, [neg_integer, optional]}]}]})),
    ?assertEqual({ok, #{body => [#{agent_id => -100}]}},
                 http_parse:check_para(#{body => [#{agent_id => "-100"}]},
                                       #{body =>
                                             [list,
                                              {para, [{agent_id, [neg_integer, required]}]}]})),
    ?assertEqual({error,
                  ?COMBINE_ERR(?HEAD_ERR(agent_id, body),
                               ?SIZE_ERR(12147483648,
                                         -2.14748364800000000000e+09,
                                         -1,
                                         neg_integer,
                                         required))},
                 http_parse:check_para(#{body => [#{agent_id => "12147483648"}]},
                                       #{body =>
                                             [list,
                                              {para, [{agent_id, [neg_integer, required]}]}]})),
    ?assertEqual({error,
                  ?COMBINE_ERR(?HEAD_ERR(agent_id, body),
                               ?SIZE_ERR(0,
                                         -2.14748364800000000000e+09,
                                         -1,
                                         neg_integer,
                                         required))},
                 http_parse:check_para(#{body => [#{agent_id => "0"}]},
                                       #{body =>
                                             [list,
                                              {para, [{agent_id, [neg_integer, required]}]}]})),
    ?assertEqual({error,
                  ?COMBINE_ERR(?HEAD_ERR(agent_id, body),
                               ?TYPE_ERR("100.0", neg_integer, required))},
                 http_parse:check_para(#{body => [#{agent_id => "100.0"}]},
                                       #{body =>
                                             [list,
                                              {para, [{agent_id, [neg_integer, required]}]}]})),

    %%bigint
    ?assertEqual({ok, #{body => [#{agent_id => -100}]}},
                 http_parse:check_para(#{body => [#{agent_id => "-100"}]},
                                       #{body =>
                                             [list, {para, [{agent_id, [bigint, optional]}]}]})),
    ?assertEqual({error,
                  ?COMBINE_ERR(?HEAD_ERR(agent_id, body), ?TYPE_ERR(undefined, bigint, optional))},
                 http_parse:check_para(#{body => [#{agent_id => undefined}]},
                                       #{body =>
                                             [list, {para, [{agent_id, [bigint, optional]}]}]})),
    ?assertEqual({error,
                  ?COMBINE_ERR(?HEAD_ERR(agent_id, body), ?TYPE_ERR(undefined, bigint, required))},
                 http_parse:check_para(#{body => [#{agent_id => undefined}]},
                                       #{body =>
                                             [tuple, {para, [{agent_id, [bigint, required]}]}]})),
    ?assertEqual({ok, #{body => [#{agent_id => 100}]}},
                 http_parse:check_para(#{body => [#{agent_id => 100}]},
                                       #{body =>
                                             [list, {para, [{agent_id, [bigint, optional]}]}]})),
    ?assertEqual({ok, #{body => [#{agent_id => -100}]}},
                 http_parse:check_para(#{body => [#{agent_id => "-100"}]},
                                       #{body =>
                                             [list, {para, [{agent_id, [bigint, required]}]}]})),
    ?assertEqual({error,
                  ?COMBINE_ERR(?HEAD_ERR(agent_id, body),
                               ?SIZE_ERR(9223372036854775809,
                                         -9223372036854775808,
                                         9223372036854775808,
                                         bigint,
                                         required))},
                 http_parse:check_para(#{body => [#{agent_id => "9223372036854775809"}]},
                                       #{body =>
                                             [list, {para, [{agent_id, [bigint, required]}]}]})),
    ?assertEqual({error,
                  ?COMBINE_ERR(?HEAD_ERR(agent_id, body),
                               ?SIZE_ERR(9223372036854775809,
                                         -9223372036854775808,
                                         9223372036854775808,
                                         bigint,
                                         required))},
                 http_parse:check_para(#{body => [#{agent_id => "9223372036854775809"}]},
                                       #{body =>
                                             [list, {para, [{agent_id, [bigint, required]}]}]})),
    ?assertEqual({error,
                  ?COMBINE_ERR(?HEAD_ERR(agent_id, body), ?TYPE_ERR("100.0", bigint, required))},
                 http_parse:check_para(#{body => [#{agent_id => "100.0"}]},
                                       #{body =>
                                             [list, {para, [{agent_id, [bigint, required]}]}]})),
    %%pos_bigint
    ?assertEqual({error,
                  ?COMBINE_ERR(?HEAD_ERR(agent_id, body),
                               ?SIZE_ERR(-100, 1, 9223372036854775808, pos_bigint, optional))},
                 http_parse:check_para(#{body => [#{agent_id => "-100"}]},
                                       #{body =>
                                             [list,
                                              {para, [{agent_id, [pos_bigint, optional]}]}]})),
    ?assertEqual({error,
                  ?COMBINE_ERR(?HEAD_ERR(agent_id, body),
                               ?TYPE_ERR(undefined, pos_bigint, optional))},
                 http_parse:check_para(#{body => [#{agent_id => undefined}]},
                                       #{body =>
                                             [list,
                                              {para, [{agent_id, [pos_bigint, optional]}]}]})),
    ?assertEqual({ok, #{body => []}},
                 http_parse:check_para(#{body => []},
                                       #{body =>
                                             [list,
                                              {para, [{agent_id, [pos_bigint, optional]}]}]})),
    ?assertEqual({error,
                  ?COMBINE_ERR(?HEAD_ERR(agent_id, body),
                               ?TYPE_ERR(undefined, pos_bigint, required))},
                 http_parse:check_para(#{body => [#{agent_id => undefined}]},
                                       #{body =>
                                             [tuple,
                                              {para, [{agent_id, [pos_bigint, required]}]}]})),
    ?assertEqual({ok, #{body => [#{agent_id => 100}]}},
                 http_parse:check_para(#{body => [#{agent_id => 100}]},
                                       #{body =>
                                             [list,
                                              {para, [{agent_id, [pos_bigint, optional]}]}]})),
    ?assertEqual({error,
                  ?COMBINE_ERR(?HEAD_ERR(agent_id, body),
                               ?SIZE_ERR(-100, 1, 9223372036854775808, pos_bigint, required))},
                 http_parse:check_para(#{body => [#{agent_id => "-100"}]},
                                       #{body =>
                                             [list,
                                              {para, [{agent_id, [pos_bigint, required]}]}]})),
    ?assertEqual({error,
                  ?COMBINE_ERR(?HEAD_ERR(agent_id, body),
                               ?SIZE_ERR(9223372036854775809,
                                         1,
                                         9223372036854775808,
                                         pos_bigint,
                                         required))},
                 http_parse:check_para(#{body => [#{agent_id => "9223372036854775809"}]},
                                       #{body =>
                                             [list,
                                              {para, [{agent_id, [pos_bigint, required]}]}]})),
    ?assertEqual({error,
                  ?COMBINE_ERR(?HEAD_ERR(agent_id, body),
                               ?SIZE_ERR(-9223372036854775809,
                                         1,
                                         9223372036854775808,
                                         pos_bigint,
                                         required))},
                 http_parse:check_para(#{body => [#{agent_id => "-9223372036854775809"}]},
                                       #{body =>
                                             [list,
                                              {para, [{agent_id, [pos_bigint, required]}]}]})),
    ?assertEqual({error,
                  ?COMBINE_ERR(?HEAD_ERR(agent_id, body),
                               ?TYPE_ERR("100.0", pos_bigint, required))},
                 http_parse:check_para(#{body => [#{agent_id => "100.0"}]},
                                       #{body =>
                                             [list,
                                              {para, [{agent_id, [pos_bigint, required]}]}]})),

    %%non_neg_integer
    ?assertEqual({ok, #{body => [#{agent_id => 100}]}},
                 http_parse:check_para(#{body => [#{agent_id => "100"}]},
                                       #{body =>
                                             [list,
                                              {para, [{agent_id, [non_neg_integer, optional]}]}]})),
    ?assertEqual({error,
                  ?COMBINE_ERR(?HEAD_ERR(agent_id, body),
                               ?SIZE_ERR(-100, 0, 2147483647, non_neg_integer, optional))},
                 http_parse:check_para(#{body => [#{agent_id => "-100"}]},
                                       #{body =>
                                             [list,
                                              {para, [{agent_id, [non_neg_integer, optional]}]}]})),
    ?assertEqual({ok, #{body => [#{}]}},
                 http_parse:check_para(#{body => [#{}]},
                                       #{body =>
                                             [list,
                                              {para, [{agent_id, [non_neg_integer, optional]}]}]})),
    ?assertEqual({error,
                  ?COMBINE_ERR(?HEAD_ERR(agent_id, body),
                               ?TYPE_ERR(undefined, non_neg_integer, optional))},
                 http_parse:check_para(#{body => [#{agent_id => undefined}]},
                                       #{body =>
                                             [list,
                                              {para, [{agent_id, [non_neg_integer, optional]}]}]})),
    ?assertEqual({error,
                  ?COMBINE_ERR(?HEAD_ERR(agent_id, body),
                               ?TYPE_ERR(undefined, non_neg_integer, required))},
                 http_parse:check_para(#{body => [#{agent_id => undefined}]},
                                       #{body =>
                                             [tuple,
                                              {para, [{agent_id, [non_neg_integer, required]}]}]})),
    ?assertEqual({ok, #{body => [#{agent_id => 100}]}},
                 http_parse:check_para(#{body => [#{agent_id => 100}]},
                                       #{body =>
                                             [list,
                                              {para, [{agent_id, [non_neg_integer, optional]}]}]})),
    ?assertEqual({error,
                  ?COMBINE_ERR(?HEAD_ERR(agent_id, body),
                               ?SIZE_ERR(9223372036854775809,
                                         0,
                                         2147483647,
                                         non_neg_integer,
                                         required))},
                 http_parse:check_para(#{body => [#{agent_id => "9223372036854775809"}]},
                                       #{body =>
                                             [list,
                                              {para, [{agent_id, [non_neg_integer, required]}]}]})),
    ?assertEqual({error,
                  ?COMBINE_ERR(?HEAD_ERR(agent_id, body),
                               ?SIZE_ERR(9223372036854775809,
                                         0,
                                         2147483647,
                                         non_neg_integer,
                                         required))},
                 http_parse:check_para(#{body => [#{agent_id => "9223372036854775809"}]},
                                       #{body =>
                                             [list,
                                              {para, [{agent_id, [non_neg_integer, required]}]}]})),
    ?assertEqual({error,
                  ?COMBINE_ERR(?HEAD_ERR(agent_id, body),
                               ?TYPE_ERR(abc, non_neg_integer, required))},
                 http_parse:check_para(#{body => [#{agent_id => <<"abc">>}]},
                                       #{body =>
                                             [list,
                                              {para, [{agent_id, [non_neg_integer, required]}]}]})),
    ?assertEqual({error,
                  ?COMBINE_ERR(?HEAD_ERR(agent_id, body),
                               ?TYPE_ERR("100.0", non_neg_integer, required))},
                 http_parse:check_para(#{body => [#{agent_id => "100.0"}]},
                                       #{body =>
                                             [list,
                                              {para, [{agent_id, [non_neg_integer, required]}]}]})),

    %%string
    ?assertEqual({error,
                  ?COMBINE_ERR(?HEAD_ERR(agent_id, body),
                               ?LENGTH_ERR("100.0", 3, string, required))},
                 http_parse:check_para(#{body => [{agent_id, "100.0"}]},
                                       #{body =>
                                             [tuple,
                                              {para, [{agent_id, [{string, 3}, required]}]}]})),
    ?assertEqual({ok, #{body => [{agent_id, "100.0"}]}},
                 http_parse:check_para(#{body => [{agent_id, "100.0"}]},
                                       #{body =>
                                             [tuple,
                                              {para, [{agent_id, [{string, 8}, required]}]}]})),
    ?assertEqual({error,
                  ?COMBINE_ERR(?HEAD_ERR(agent_id, body),
                               ?LENGTH_ERR("Camm", 3, string, required))},
                 http_parse:check_para(#{body => [{agent_id, "Camm"}]},
                                       #{body =>
                                             [tuple,
                                              {para, [{agent_id, [{string, 3}, required]}]}]})),
    ?assertEqual({ok, #{body => [{agent_id, "100"}]}},
                 http_parse:check_para(#{body => [{agent_id, 100}]},
                                       #{body =>
                                             [tuple,
                                              {para, [{agent_id, [{string, 3}, required]}]}]})),
    ?assertEqual({ok, #{body => [{agent_id, "-100"}]}},
                 http_parse:check_para(#{body => [{agent_id, "-100"}]},
                                       #{body =>
                                             [tuple,
                                              {para, [{agent_id, [{string, 9}, required]}]}]})),
    ?assertEqual({error,
                  ?COMBINE_ERR(?HEAD_ERR(agent_id, body),
                               ?LENGTH_ERR(undefined, 3, string, optional))},
                 http_parse:check_para(#{body => [{agent_id, undefined}]},
                                       #{body =>
                                             [tuple,
                                              {para, [{agent_id, [{string, 3}, optional]}]}]})),

    %%float
    ?assertEqual({error,
                  ?COMBINE_ERR(?HEAD_ERR(agent_id, body),
                               ?SIZE_ERR(100.0000, 3, 10, float, required))},
                 http_parse:check_para(#{body => [{agent_id, "100.0"}]},
                                       #{body =>
                                             [tuple,
                                              {para, [{agent_id, [{float, 3, 10}, required]}]}]})),
    ?assertEqual({error,
                  ?COMBINE_ERR(?HEAD_ERR(agent_id, body),
                               ?SIZE_ERR(1.0000, 3, 10, float, required))},
                 http_parse:check_para(#{body => [{agent_id, "1.0"}]},
                                       #{body =>
                                             [tuple,
                                              {para, [{agent_id, [{float, 3, 10}, required]}]}]})),
    ?assertEqual({error,
                  ?COMBINE_ERR(?HEAD_ERR(agent_id, body), ?TYPE_ERR('Camm', float, required))},
                 http_parse:check_para(#{body => [{agent_id, "Camm"}]},
                                       #{body =>
                                             [tuple,
                                              {para, [{agent_id, [{float, 3, 10}, required]}]}]})),
    ?assertEqual({ok, #{body => [{agent_id, 6.0}]}},
                 http_parse:check_para(#{body => [{agent_id, "6"}]},
                                       #{body =>
                                             [tuple,
                                              {para, [{agent_id, [{float, 3, 10}, required]}]}]})),
    ?assertEqual({error,
                  ?COMBINE_ERR(?HEAD_ERR(agent_id, body), ?TYPE_ERR(abc, float, required))},
                 http_parse:check_para(#{body => [{agent_id, abc}]},
                                       #{body =>
                                             [tuple,
                                              {para, [{agent_id, [{float, 3, 10}, required]}]}]})),
    ?assertEqual({error,
                  ?COMBINE_ERR(?HEAD_ERR(agent_id, body), ?TYPE_ERR(undefined, float, optional))},
                 http_parse:check_para(#{body => [{agent_id, <<"undefined">>}]},
                                       #{body =>
                                             [tuple,
                                              {para, [{agent_id, [{float, 3, 10}, optional]}]}]})),
    ?assertEqual({ok, #{body => []}},
                 http_parse:check_para(#{body => []},
                                       #{body =>
                                             [tuple,
                                              {para, [{agent_id, [{float, 3, 10}, optional]}]}]})),

    %%number
    ?assertEqual({error,
                  ?COMBINE_ERR(?HEAD_ERR(agent_id, body),
                               ?SIZE_ERR(100.0000, 3, 10, number, required))},
                 http_parse:check_para(#{body => [{agent_id, "100.0"}]},
                                       #{body =>
                                             [tuple,
                                              {para, [{agent_id, [{number, 3, 10}, required]}]}]})),
    ?assertEqual({error,
                  ?COMBINE_ERR(?HEAD_ERR(agent_id, body), ?TYPE_ERR(abc, number, required))},
                 http_parse:check_para(#{body => [{agent_id, abc}]},
                                       #{body =>
                                             [tuple,
                                              {para, [{agent_id, [{number, 3, 10}, required]}]}]})),
    ?assertEqual({error,
                  <<"Error agent_id, The body param agent_id is Camm must be number, "
                    "type is required">>},
                 http_parse:check_para(#{body => [{agent_id, "Camm"}]},
                                       #{body =>
                                             [tuple,
                                              {para, [{agent_id, [{number, 3, 10}, required]}]}]})),
    ?assertEqual({ok, #{body => [{agent_id, 6}]}},
                 http_parse:check_para(#{body => [{agent_id, "6"}]},
                                       #{body =>
                                             [tuple,
                                              {para, [{agent_id, [{number, 3, 10}, required]}]}]})),
    ?assertEqual({error,
                  ?COMBINE_ERR(?HEAD_ERR(agent_id, body),
                               ?SIZE_ERR(-100, 3, 10, number, required))},
                 http_parse:check_para(#{body => [{agent_id, "-100"}]},
                                       #{body =>
                                             [tuple,
                                              {para, [{agent_id, [{number, 3, 10}, required]}]}]})),
    ?assertEqual({error,
                  ?COMBINE_ERR(?HEAD_ERR(agent_id, body), ?TYPE_ERR(undefined, number, optional))},
                 http_parse:check_para(#{body => [{agent_id, undefined}]},
                                       #{body =>
                                             [tuple,
                                              {para, [{agent_id, [{number, 3, 10}, optional]}]}]})),
    ?assertEqual({ok, #{body => []}},
                 http_parse:check_para(#{body => []},
                                       #{body =>
                                             [tuple,
                                              {para, [{agent_id, [{number, 3, 10}, optional]}]}]})),
    ?assertEqual({ok, #{body => #{agent_id => 100}}},
                 http_parse:check_para(#{body => #{agent_id => "100"}},
                                       #{body =>
                                             [tuple,
                                              {para, [{agent_id, [pos_integer, required]}]}]})),
    ?assertEqual({ok, #{body => #{agent_id => 100}}},
                 http_parse:check_para(#{body => #{agent_id => "100"}},
                                       #{body => [{para, [{agent_id, [pos_integer, required]}]}]})),
    ?assertEqual({ok, #{body => #{<<"agent_id">> => "100"}, qs => [{agent_id, "100"}]}},
                 http_parse:check_para(#{body => #{<<"agent_id">> => "100"},
                                         qs => [{agent_id, "100"}]},
                                       #{body => [{para, [{agent_id, [{string, 4}, required]}]}]})),
    ?assertEqual({ok,
                  #{body => #{<<"a">> => 1},
                    qs => #{<<"b">> => 1},
                    bindings => #{<<"who">> => "abc"},
                    headers => #{<<"api">> => "api"}}},
                 http_parse:check_para(#{body => #{<<"a">> => 1},
                                         qs => #{<<"b">> => 1},
                                         bindings => #{<<"who">> => <<"abc">>},
                                         headers => #{<<"api">> => <<"api">>}},
                                       #{body => [{a, [pos_integer, required]}],
                                         qs => [{b, [pos_integer, required]}],
                                         bindings => [{who, [{string, 3}, required]}],
                                         headers => [{api, [{string, 20}, required]}]})),

    ?assertEqual({ok, #{body => #{<<"agent_id">> => "100"}, qs => [{agent_id, "100"}]}},
                 http_parse:check_para(#{body => #{<<"agent_id">> => "100"},
                                         qs => [{agent_id, "100"}]},
                                       #{body => [{para, [{agent_id, [{string, 4}, required]}]}],
                                         qs => [{para, [{agent_id, [{string, 4}, required]}]}]})),

    ?assertEqual({ok, #{body => #{agent_id => 100}}},
                 http_parse:check_para(#{body => #{agent_id => "100"}},
                                       #{body => [{para, [{agent_id, [pos_integer, required]}]}]})),
    ?assertEqual({error,
                  ?COMBINE_ERR(?HEAD_ERR(agent_id, qs), ?LENGTH_ERR(10000, 4, string, required))},
                 http_parse:check_para(#{body => #{<<"agent_id">> => "100"},
                                         qs => [{agent_id, "10000"}]},
                                       #{body => [{para, [{agent_id, [{string, 4}, required]}]}],
                                         qs => [{para, [{agent_id, [{string, 4}, required]}]}]})),
    ?assertEqual({error,
                  ?COMBINE_ERR(?HEAD_ERR(agent_id, qs), ?LENGTH_ERR(10000, 4, binary, required))},
                 http_parse:check_para(#{body => #{<<"agent_id">> => "100"},
                                         qs => [{agent_id, "10000"}]},
                                       #{body => [{para, [{agent_id, [{binary, 4}, required]}]}],
                                         qs => [{para, [{agent_id, [{binary, 4}, required]}]}]})),

    ?assertEqual({error,
                  ?COMBINE_ERR(?HEAD_ERR(agent_id, body), ?LENGTH_ERR(1234, 3, binary, required))},
                 http_parse:check_para(#{body => [{agent_id, <<"1234">>}]},
                                       #{body => [tuple, [{agent_id, [{binary, 3}, required]}]]})),
    ?assertEqual({ok, #{body => [{agent_id, "100.0"}]}},
                 http_parse:check_para(#{body => [{agent_id, "100.0"}]},
                                       #{body =>
                                             [tuple,
                                              {para, [{agent_id, [{string, 8}, required]}]}]})),
    ?assertEqual({error,
                  ?COMBINE_ERR(?HEAD_ERR(agent_id, body),
                               ?LENGTH_ERR("Camm", 3, binary, required))},
                 http_parse:check_para(#{body => [{agent_id, "Camm"}]},
                                       #{body =>
                                             [tuple,
                                              {para, [{agent_id, [{binary, 3}, required]}]}]})),
    ?assertEqual({ok, #{body => [{agent_id, <<"100">>}]}},
                 http_parse:check_para(#{body => [{agent_id, 100}]},
                                       #{body =>
                                             [tuple,
                                              {para, [{agent_id, [{binary, 3}, required]}]}]})),
    ?assertEqual({ok, #{body => [{agent_id, <<"-100">>}]}},
                 http_parse:check_para(#{body => [{agent_id, "-100"}]},
                                       #{body =>
                                             [tuple,
                                              {para, [{agent_id, [{binary, 9}, required]}]}]})),
    ?assertEqual({error,
                  ?COMBINE_ERR(?HEAD_ERR(agent_id, body),
                               ?LENGTH_ERR(undefined, 3, binary, optional))},
                 http_parse:check_para(#{body => [{agent_id, undefined}]},
                                       #{body =>
                                             [tuple,
                                              {para, [{agent_id, [{binary, 3}, optional]}]}]})),

    ?assertEqual({error,
                  ?COMBINE_ERR(?HEAD_ERR(agent_id, body), ?TYPE_ERR("1a", pos_integer, required))},
                 http_parse:check_para(#{bindings => #{},
                                         body => [{<<"agent_id">>, <<"1a">>}],
                                         headers =>
                                             #{<<"accept">> => <<"*/*">>,
                                               <<"accept-encoding">> => <<"gzip, deflate">>,
                                               <<"cache-control">> => <<"no-cache">>,
                                               <<"connection">> => <<"keep-alive">>,
                                               <<"content-length">> => <<"155">>,
                                               <<"content-type">> => <<"text/plain">>,
                                               <<"host">> => <<"127.0.0.1:9191">>,
                                               <<"merchantcode">> => <<"xx">>,
                                               <<"merchantname">> => <<"xx">>,
                                               <<"postman-token">> =>
                                                   <<"5c8af139-ad31-4f4e-975d-0cdff5f5d4f0">>,
                                               <<"token">> => <<"AQAAAABcNy0ht3ItRiy6zPjh8pnOu">>,
                                               <<"user-agent">> => <<"PostmanRuntime/7.15.2">>},
                                         qs => []},
                                       #{body =>
                                             [{agent_id, [pos_integer, required]},
                                              {duplicate, [pos_integer, optional]},
                                              {comment, [{string, 100}, optional]},
                                              {op_type, [pos_integer, optional]},
                                              {op_uname, [{string, 20}, optional]}]})),

    ?assertEqual({error,
                  ?COMBINE_ERR(?HEAD_ERR(agent_id, body), ?TYPE_ERR("1a", pos_integer, required))},
                 http_parse:check_para(#{bindings => #{},
                                         body =>
                                             [{<<"agent_id">>, <<"1a">>},
                                              {<<"user_id">>, 1800661},
                                              {<<"order_id">>, <<"18005257669613458">>},
                                              {<<"amount">>, 100},
                                              {<<"time">>, <<"1234567890">>},
                                              {<<"type">>, 44},
                                              {<<"action">>, 10},
                                              {<<"comment">>,
                                               <<231,
                                                 186,
                                                 191,
                                                 228,
                                                 184,
                                                 138,
                                                 229,
                                                 133,
                                                 133,
                                                 229,
                                                 128,
                                                 188>>}],
                                         headers =>
                                             #{<<"accept">> => <<"*/*">>,
                                               <<"accept-encoding">> => <<"gzip, deflate">>,
                                               <<"cache-control">> => <<"no-cache">>,
                                               <<"connection">> => <<"keep-alive">>,
                                               <<"content-length">> => <<"155">>,
                                               <<"content-type">> => <<"text/plain">>,
                                               <<"host">> => <<"127.0.0.1:9191">>,
                                               <<"merchantcode">> => <<"xx">>,
                                               <<"merchantname">> => <<"xx">>,
                                               <<"postman-token">> =>
                                                   <<"5c8af139-ad31-4f4e-975d-0cdff5f5d4f0">>,
                                               <<"token">> => <<"AQAAAABcNy0ht3ItRiy6zPjh8pnOu">>,
                                               <<"user-agent">> => <<"PostmanRuntime/7.15.2">>},
                                         qs => []},
                                       #{body =>
                                             [{agent_id, [pos_integer, required]},
                                              {user_id, [bigint, required]},
                                              {order_id, [{binary, 25}, required]},
                                              {amount, [bigint, required]},
                                              {time, [bigint, required]},
                                              {action, [pos_integer, required]},
                                              {type, [pos_integer, required]},
                                              {duplicate, [pos_integer, optional]},
                                              {comment, [{binary, 100}, optional]},
                                              {op_type, [pos_integer, optional]},
                                              {op_uname, [{binary, 20}, optional]}]})),

    ?assertEqual({ok,
                  #{bindings => #{},
                    body =>
                        [{<<"agent_id">>, 18},
                         {<<"user_id">>, 1800661},
                         {<<"order_id">>, "18005257669613458"},
                         {<<"amount">>, 100},
                         {<<"time">>, 1234567890},
                         {<<"type">>, 44},
                         {<<"action">>, 10},
                         {<<"comment">>,
                          <<231, 186, 191, 228, 184, 138, 229, 133, 133, 229, 128, 188>>}],
                    headers =>
                        #{<<"accept">> => <<"*/*">>,
                          <<"accept-encoding">> => <<"gzip, deflate">>,
                          <<"cache-control">> => <<"no-cache">>,
                          <<"connection">> => <<"keep-alive">>,
                          <<"content-length">> => <<"155">>,
                          <<"content-type">> => <<"text/plain">>,
                          <<"host">> => <<"127.0.0.1:9191">>,
                          <<"merchantcode">> => <<"xx">>,
                          <<"merchantname">> => <<"xx">>,
                          <<"postman-token">> => <<"5c8af139-ad31-4f4e-975d-0cdff5f5d4f0">>,
                          <<"token">> => <<"AQAAAABcNy0ht3ItRiy6zPjh8pnOu">>,
                          <<"user-agent">> => <<"PostmanRuntime/7.15.2">>},
                    qs => []}},
                 http_parse:check_para(#{bindings => #{},
                                         body =>
                                             [{<<"agent_id">>, <<"18">>},
                                              {<<"user_id">>, 1800661},
                                              {<<"order_id">>, <<"18005257669613458">>},
                                              {<<"amount">>, 100},
                                              {<<"time">>, <<"1234567890">>},
                                              {<<"type">>, 44},
                                              {<<"action">>, 10},
                                              {<<"comment">>,
                                               <<231,
                                                 186,
                                                 191,
                                                 228,
                                                 184,
                                                 138,
                                                 229,
                                                 133,
                                                 133,
                                                 229,
                                                 128,
                                                 188>>}],
                                         headers =>
                                             #{<<"accept">> => <<"*/*">>,
                                               <<"accept-encoding">> => <<"gzip, deflate">>,
                                               <<"cache-control">> => <<"no-cache">>,
                                               <<"connection">> => <<"keep-alive">>,
                                               <<"content-length">> => <<"155">>,
                                               <<"content-type">> => <<"text/plain">>,
                                               <<"host">> => <<"127.0.0.1:9191">>,
                                               <<"merchantcode">> => <<"xx">>,
                                               <<"merchantname">> => <<"xx">>,
                                               <<"postman-token">> =>
                                                   <<"5c8af139-ad31-4f4e-975d-0cdff5f5d4f0">>,
                                               <<"token">> => <<"AQAAAABcNy0ht3ItRiy6zPjh8pnOu">>,
                                               <<"user-agent">> => <<"PostmanRuntime/7.15.2">>},
                                         qs => []},
                                       #{body =>
                                             [{agent_id, [pos_integer, required]},
                                              {user_id, [bigint, required]},
                                              {order_id, [{string, 25}, required]},
                                              {amount, [bigint, required]},
                                              {time, [bigint, required]},
                                              {action, [pos_integer, required]},
                                              {type, [pos_integer, required]},
                                              {duplicate, [pos_integer, optional]},
                                              {comment, [{binary, 100}, optional]},
                                              {op_type, [pos_integer, optional]},
                                              {op_uname, [{binary, 20}, optional]}]})),

    ?assertEqual({ok,
                  #{bindings => #{},
                    body =>
                        [{<<"agent_id">>, 18},
                         {<<"user_id">>, 1800661},
                         {<<"order_id">>, "18005257669613458"},
                         {<<"amount">>, 100},
                         {<<"time">>, 1234567890},
                         {<<"type">>, 44},
                         {<<"action">>, 10},
                         {<<"comment">>, <<115, 117, 114, 112, 105, 115, 101>>}],
                    headers =>
                        #{<<"accept">> => <<"*/*">>,
                          <<"accept-encoding">> => <<"gzip, deflate">>,
                          <<"cache-control">> => <<"no-cache">>,
                          <<"connection">> => <<"keep-alive">>,
                          <<"content-length">> => <<"155">>,
                          <<"content-type">> => <<"text/plain">>,
                          <<"host">> => <<"127.0.0.1:9191">>,
                          <<"merchantcode">> => <<"xx">>,
                          <<"merchantname">> => <<"xx">>,
                          <<"postman-token">> => <<"5c8af139-ad31-4f4e-975d-0cdff5f5d4f0">>,
                          <<"token">> => <<"AQAAAABcNy0ht3ItRiy6zPjh8pnOu">>,
                          <<"user-agent">> => <<"PostmanRuntime/7.15.2">>},
                    qs => []}},
                 http_parse:check_para(#{bindings => #{},
                                         body =>
                                             [{<<"agent_id">>, <<"18">>},
                                              {<<"user_id">>, 1800661},
                                              {<<"order_id">>, <<"18005257669613458">>},
                                              {<<"amount">>, 100},
                                              {<<"time">>, <<"1234567890">>},
                                              {<<"type">>, 44},
                                              {<<"action">>, 10},
                                              {<<"comment">>,
                                               <<115, 117, 114, 112, 105, 115, 101>>}],
                                         headers =>
                                             #{<<"accept">> => <<"*/*">>,
                                               <<"accept-encoding">> => <<"gzip, deflate">>,
                                               <<"cache-control">> => <<"no-cache">>,
                                               <<"connection">> => <<"keep-alive">>,
                                               <<"content-length">> => <<"155">>,
                                               <<"content-type">> => <<"text/plain">>,
                                               <<"host">> => <<"127.0.0.1:9191">>,
                                               <<"merchantcode">> => <<"xx">>,
                                               <<"merchantname">> => <<"xx">>,
                                               <<"postman-token">> =>
                                                   <<"5c8af139-ad31-4f4e-975d-0cdff5f5d4f0">>,
                                               <<"token">> => <<"AQAAAABcNy0ht3ItRiy6zPjh8pnOu">>,
                                               <<"user-agent">> => <<"PostmanRuntime/7.15.2">>},
                                         qs => []},
                                       #{body =>
                                             [{agent_id, [pos_integer, required]},
                                              {user_id, [bigint, required]},
                                              {order_id, [{string, 25}, required]},
                                              {amount, [bigint, required]},
                                              {time, [bigint, required]},
                                              {action, [pos_integer, required]},
                                              {type, [pos_integer, required]},
                                              {duplicate, [pos_integer, optional]},
                                              {comment,
                                               [{binary, 100},
                                                optional,
                                                "^[a-zA-Z0-9][A-Za-z0-9_-]{1,31}$"]},
                                              {op_type, [pos_integer, optional]},
                                              {op_uname, [{binary, 20}, optional]}]})),

    ?assertEqual({error,
                  ?COMBINE_ERR(?HEAD_ERR(comment, body),
                               ?INVALIDE_ERR("select * from common.user",
                                             "{binary,10}",
                                             optional))},
                 http_parse:check_para(#{bindings => #{},
                                         body =>
                                             [{<<"agent_id">>, <<"18">>},
                                              {<<"user_id">>, 1800661},
                                              {<<"order_id">>, <<"18005257669613458">>},
                                              {<<"amount">>, 100},
                                              {<<"time">>, <<"1234567890">>},
                                              {<<"type">>, 44},
                                              {<<"action">>, 10},
                                              {<<"comment">>, <<"select * from common.user">>}],
                                         headers =>
                                             #{<<"accept">> => <<"*/*">>,
                                               <<"accept-encoding">> => <<"gzip, deflate">>,
                                               <<"cache-control">> => <<"no-cache">>,
                                               <<"connection">> => <<"keep-alive">>,
                                               <<"content-length">> => <<"155">>,
                                               <<"content-type">> => <<"text/plain">>,
                                               <<"host">> => <<"127.0.0.1:9191">>,
                                               <<"merchantcode">> => <<"xx">>,
                                               <<"merchantname">> => <<"xx">>,
                                               <<"postman-token">> =>
                                                   <<"5c8af139-ad31-4f4e-975d-0cdff5f5d4f0">>,
                                               <<"token">> => <<"AQAAAABcNy0ht3ItRiy6zPjh8pnOu">>,
                                               <<"user-agent">> => <<"PostmanRuntime/7.15.2">>},
                                         qs => []},
                                       #{body =>
                                             [{agent_id, [pos_integer, required]},
                                              {user_id, [bigint, required]},
                                              {order_id, [{string, 25}, required]},
                                              {amount, [bigint, required]},
                                              {time, [bigint, required]},
                                              {action, [pos_integer, required]},
                                              {type, [pos_integer, required]},
                                              {duplicate, [pos_integer, optional]},
                                              {comment,
                                               [{binary, 10},
                                                optional,
                                                "^[a-zA-Z0-9][A-Za-z0-9_-]{1,31}$"]},
                                              {op_type, [pos_integer, optional]},
                                              {op_uname, [{binary, 20}, optional]}]})),

    ?assertEqual({ok,
                  #{bindings => #{},
                    body =>
                        [{<<"agent_id">>, 18},
                         {<<"user_id">>, 1800661},
                         {<<"order_id">>, "18005257669613458"},
                         {<<"amount">>, 100},
                         {<<"time">>, 1234567890},
                         {<<"type">>, 44},
                         {<<"action">>, 10},
                         {<<"comment">>, <<>>}],
                    headers =>
                        #{<<"accept">> => <<"*/*">>,
                          <<"accept-encoding">> => <<"gzip, deflate">>,
                          <<"cache-control">> => <<"no-cache">>,
                          <<"connection">> => <<"keep-alive">>,
                          <<"content-length">> => <<"155">>,
                          <<"content-type">> => <<"text/plain">>,
                          <<"host">> => <<"127.0.0.1:9191">>,
                          <<"merchantcode">> => <<"xx">>,
                          <<"merchantname">> => <<"xx">>,
                          <<"postman-token">> => <<"5c8af139-ad31-4f4e-975d-0cdff5f5d4f0">>,
                          <<"token">> => <<"AQAAAABcNy0ht3ItRiy6zPjh8pnOu">>,
                          <<"user-agent">> => <<"PostmanRuntime/7.15.2">>},
                    qs => []}},
                 http_parse:check_para(#{bindings => #{},
                                         body =>
                                             [{<<"agent_id">>, <<"18">>},
                                              {<<"user_id">>, 1800661},
                                              {<<"order_id">>, <<"18005257669613458">>},
                                              {<<"amount">>, 100},
                                              {<<"time">>, <<"1234567890">>},
                                              {<<"type">>, 44},
                                              {<<"action">>, 10},
                                              {<<"comment">>, <<"">>}],
                                         headers =>
                                             #{<<"accept">> => <<"*/*">>,
                                               <<"accept-encoding">> => <<"gzip, deflate">>,
                                               <<"cache-control">> => <<"no-cache">>,
                                               <<"connection">> => <<"keep-alive">>,
                                               <<"content-length">> => <<"155">>,
                                               <<"content-type">> => <<"text/plain">>,
                                               <<"host">> => <<"127.0.0.1:9191">>,
                                               <<"merchantcode">> => <<"xx">>,
                                               <<"merchantname">> => <<"xx">>,
                                               <<"postman-token">> =>
                                                   <<"5c8af139-ad31-4f4e-975d-0cdff5f5d4f0">>,
                                               <<"token">> => <<"AQAAAABcNy0ht3ItRiy6zPjh8pnOu">>,
                                               <<"user-agent">> => <<"PostmanRuntime/7.15.2">>},
                                         qs => []},
                                       #{body =>
                                             [{agent_id, [pos_integer, required]},
                                              {user_id, [bigint, required]},
                                              {order_id, [{string, 25}, required]},
                                              {amount, [bigint, required]},
                                              {time, [bigint, required]},
                                              {action, [pos_integer, required]},
                                              {type, [pos_integer, required]},
                                              {duplicate, [pos_integer, optional]},
                                              {comment,
                                               [{binary, 10},
                                                optional,
                                                "^[a-zA-Z0-9][A-Za-z0-9_-]{1,31}$"]},
                                              {op_type, [pos_integer, optional]},
                                              {op_uname, [{binary, 20}, optional]}]})),

    ?assertEqual({error,
                  <<"Error user_id, The body param user_id is  must be bigint, type "
                    "is required">>},
                 http_parse:check_para(#{bindings => #{},
                                         body =>
                                             [{<<"agent_id">>, <<"18">>},
                                              {<<"user_id">>, <<"">>},
                                              {<<"order_id">>, <<"18005257669613458">>},
                                              {<<"amount">>, 100},
                                              {<<"time">>, <<"1234567890">>},
                                              {<<"type">>, 44},
                                              {<<"action">>, 10},
                                              {<<"comment">>, <<"">>}],
                                         headers =>
                                             #{<<"accept">> => <<"*/*">>,
                                               <<"accept-encoding">> => <<"gzip, deflate">>,
                                               <<"cache-control">> => <<"no-cache">>,
                                               <<"connection">> => <<"keep-alive">>,
                                               <<"content-length">> => <<"155">>,
                                               <<"content-type">> => <<"text/plain">>,
                                               <<"host">> => <<"127.0.0.1:9191">>,
                                               <<"merchantcode">> => <<"xx">>,
                                               <<"merchantname">> => <<"xx">>,
                                               <<"postman-token">> =>
                                                   <<"5c8af139-ad31-4f4e-975d-0cdff5f5d4f0">>,
                                               <<"token">> => <<"AQAAAABcNy0ht3ItRiy6zPjh8pnOu">>,
                                               <<"user-agent">> => <<"PostmanRuntime/7.15.2">>},
                                         qs => []},
                                       #{body =>
                                             [{agent_id, [pos_integer, required]},
                                              {user_id, [bigint, required]},
                                              {order_id, [{string, 25}, required]},
                                              {amount, [bigint, required]},
                                              {time, [bigint, required]},
                                              {action, [pos_integer, required]},
                                              {type, [pos_integer, required]},
                                              {duplicate, [pos_integer, optional]},
                                              {comment,
                                               [{binary, 10},
                                                optional,
                                                "^[a-zA-Z0-9][A-Za-z0-9_-]{1,31}$"]},
                                              {op_type, [pos_integer, optional]},
                                              {op_uname, [{binary, 20}, optional]}]})),

    ?assertEqual({error,
                  ?COMBINE_ERR(?HEAD_ERR(user_id, body), ?TYPE_ERR(<<"">>, bigint, required))},
                 http_parse:check_para(#{bindings => #{},
                                         body =>
                                             [{<<"agent_id">>, <<"18">>},
                                              {<<"user_id">>, <<"">>},
                                              {<<"order_id">>, <<"18005257669613458">>},
                                              {<<"amount">>, 100},
                                              {<<"time">>, <<"1234567890">>},
                                              {<<"type">>, 44},
                                              {<<"action">>, 10},
                                              {<<"comment">>, <<"panliang">>}],
                                         headers =>
                                             #{<<"accept">> => <<"*/*">>,
                                               <<"accept-encoding">> => <<"gzip, deflate">>,
                                               <<"cache-control">> => <<"no-cache">>,
                                               <<"connection">> => <<"keep-alive">>,
                                               <<"content-length">> => <<"155">>,
                                               <<"content-type">> => <<"text/plain">>,
                                               <<"host">> => <<"127.0.0.1:9191">>,
                                               <<"merchantcode">> => <<"xx">>,
                                               <<"merchantname">> => <<"xx">>,
                                               <<"postman-token">> =>
                                                   <<"5c8af139-ad31-4f4e-975d-0cdff5f5d4f0">>,
                                               <<"token">> => <<"AQAAAABcNy0ht3ItRiy6zPjh8pnOu">>,
                                               <<"user-agent">> => <<"PostmanRuntime/7.15.2">>},
                                         qs => []},
                                       #{body =>
                                             [{agent_id, [pos_integer, required]},
                                              {user_id, [bigint, required]},
                                              {order_id, [{string, 25}, required]},
                                              {amount, [bigint, required]},
                                              {time, [bigint, required]},
                                              {action, [pos_integer, required]},
                                              {type, [pos_integer, required]},
                                              {duplicate, [pos_integer, optional]},
                                              {comment,
                                               [{binary, 10},
                                                optional,
                                                "^[a-zA-Z0-9][A-Za-z0-9_-]{1,31}$"]},
                                              {op_type, [pos_integer, optional]},
                                              {op_uname, [{binary, 20}, optional]}]})),

    ?assertEqual({error,
                  ?COMBINE_ERR(?HEAD_ERR(amount, body),
                               ?SIZE_ERR(15, 10, 20, 15, number, required))},
                 http_parse:check_para(#{bindings => #{},
                                         body =>
                                             [{<<"agent_id">>, <<"18">>},
                                              {<<"user_id">>, <<"31">>},
                                              {<<"order_id">>, <<"18005257669613458">>},
                                              {<<"amount">>, 15},
                                              {<<"time">>, <<"1234567890">>},
                                              {<<"type">>, 44},
                                              {<<"action">>, 10},
                                              {<<"comment">>, <<"panliang">>}],
                                         headers =>
                                             #{<<"accept">> => <<"*/*">>,
                                               <<"accept-encoding">> => <<"gzip, deflate">>,
                                               <<"cache-control">> => <<"no-cache">>,
                                               <<"connection">> => <<"keep-alive">>,
                                               <<"content-length">> => <<"155">>,
                                               <<"content-type">> => <<"text/plain">>,
                                               <<"host">> => <<"127.0.0.1:9191">>,
                                               <<"merchantcode">> => <<"xx">>,
                                               <<"merchantname">> => <<"xx">>,
                                               <<"postman-token">> =>
                                                   <<"5c8af139-ad31-4f4e-975d-0cdff5f5d4f0">>,
                                               <<"token">> => <<"AQAAAABcNy0ht3ItRiy6zPjh8pnOu">>,
                                               <<"user-agent">> => <<"PostmanRuntime/7.15.2">>},
                                         qs => []},
                                       #{body =>
                                             [{agent_id, [pos_integer, required]},
                                              {user_id, [bigint, required]},
                                              {order_id, [{string, 25}, required]},
                                              {amount, [{number, 10, 20, 15}, required]},
                                              {time, [bigint, required]},
                                              {action, [pos_integer, required]},
                                              {type, [pos_integer, required]},
                                              {duplicate, [pos_integer, optional]},
                                              {comment,
                                               [{binary, 10},
                                                optional,
                                                "^[a-zA-Z0-9][A-Za-z0-9_-]{1,31}$"]},
                                              {op_type, [pos_integer, optional]},
                                              {op_uname, [{binary, 20}, optional]}]})),

    ok.

check_object_test() ->
    %% set object cond
    Cond = #{body => [{object, [object, required]}]},
    ?assertEqual({error, ?COMBINE_ERR(?HEAD_ERR(object, body), ?TYPE_ERR(object))},
                 http_parse:check_para(#{body =>
                                             #{object =>
                                                   #{<<"id">> => <<"20">>,
                                                     <<"name">> => <<"12345">>}}},
                                       Cond)),
    ObjCond = #{object => [{id, [pos_integer, required]}, {name, [{binary, 5}, optional]}]},
    put(object, ObjCond),
    ?assertEqual({ok, #{body => #{object => #{<<"id">> => 20, <<"name">> => <<"12345">>}}}},
                 http_parse:check_para(#{body =>
                                             #{object =>
                                                   #{<<"id">> => <<"20">>,
                                                     <<"name">> => <<"12345">>}}},
                                       Cond)),

    ?assertEqual({ok, #{<<"object">> => #{<<"id">> => 20}}},
                 http_parse:check_para(#{<<"object">> => #{<<"id">> => <<"20">>}},
                                       #{object => [{id, [pos_integer, required]}]})),
    ok.
